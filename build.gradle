plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
}

ext {
	springModulithVersion = "1.1.2"
}

jar {
	enabled = false
}

group 'yonsei.gemini'
version '0.0.1'
java {
	sourceCompatibility = '17'
}

repositories {
    mavenCentral()
	maven { url 'https://repository.aspose.com/repo/'}
}

dependencies {
	/*
	spring-boot-starter 관련 라이브러리에 대한 설명은 아래의 URL를 참고해주세요.
	For a description of the spring-boot-starter related library, please refer to the following URL.
	spring-boot-starter関連ライブラリについては、次のURLを参照してください。

	https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#using-boot-starter 
	*/
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation 'io.github.flashvayne:chatgpt-spring-boot-starter:1.0.0'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-data-rest"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly "org.springframework.modulith:spring-modulith-actuator"
	compileOnly "org.projectlombok:lombok"
	implementation 'javax.servlet:javax.servlet-api:4.0.1'
	developmentOnly "org.springframework.boot:spring-boot-devtools"
	annotationProcessor "org.projectlombok:lombok"
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-mustache'
	implementation 'com.aspose:aspose-pdf:24.1'

	/* Web 
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.boot:spring-boot-starter-hateoas')
	compile('org.springframework.boot:spring-boot-starter-jersey')
	compile('org.springframework.boot:spring-boot-starter-web-services')
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('org.springframework.boot:spring-boot-starter-websocket')
	compile('org.springframework.data:spring-data-rest-hal-browser')
	testCompile('io.projectreactor:reactor-test')
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
	*/
	
	/* Core
	compile('org.springframework.boot:spring-boot-starter-aop')
	compile('org.springframework.boot:spring-boot-starter-cache')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-validation')
	compile('org.springframework.retry:spring-retry')
	compile('org.springframework.session:spring-session-core')
	runtime('org.springframework.boot:spring-boot-devtools')
	compileOnly('org.springframework.boot:spring-boot-configuration-processor')
	testCompile('org.springframework.security:spring-security-test')
	*/
	
	/* SQL 
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-jdbc')
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
	runtime('com.h2database:h2')
	runtime('com.microsoft.sqlserver:mssql-jdbc')

	runtime('org.apache.derby:derby')
	runtime('org.hsqldb:hsqldb')
	runtime('org.postgresql:postgresql')
	*/
	
	/* NoSQL 
	compile('org.springframework.boot:spring-boot-starter-data-elasticsearch')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	compile('org.springframework.boot:spring-boot-starter-data-redis')
	compile('org.springframework.boot:spring-boot-starter-data-redis-reactive')
	testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
	*/
	
	/* Integration
	compile('org.springframework.boot:spring-boot-starter-amqp')
	compile('org.springframework.boot:spring-boot-starter-integration')
	compile('org.apache.kafka:kafka-streams:1.0.1')
	compile('org.springframework.kafka:spring-kafka')
	*/
}

def frontendDir = "$projectDir/src/main/frontend"

sourceSets {
	main {
		resources { srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
	workingDir "$frontendDir/react"
	inputs.dir "$frontendDir/react"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install' }
	else {
		commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
	}
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$frontendDir/react"
	inputs.dir "$frontendDir/react"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

task copyReactBuildFiles(type: Copy) {
	dependsOn "buildReact"
	from "$frontendDir/react/build"
	into "$projectDir/src/main/resources/static"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.modulith:spring-modulith-bom:$springModulithVersion"
	}
}