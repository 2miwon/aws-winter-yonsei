{"ast":null,"code":"import React,{useEffect,useState,useRef,useCallback}from'react';import{Navigate,Routes,Route,useLocation}from'react-router-dom';import URL from'constants/url';import CODE from'constants/code';//COMMON\nimport EgovHeader from'components/EgovHeader';import EgovFooter from'components/EgovFooter';import EgovError from'components/EgovError';import EgovMain from'pages/main/EgovMain';import EgovLogin from'pages/login/EgovLogin';//ABOUT\nimport EgovAboutSite from'pages/about/EgovAboutSite';import EgovAboutHistory from'pages/about/EgovAboutHistory';import EgovAboutOrganization from'pages/about/EgovAboutOrganization';import EgovAboutLocation from'pages/about/EgovAboutLocation';import*as EgovNet from'api/egovFetch';// jwt토큰 위조 검사 때문에 추가\nimport initPage from'js/ui';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const RootRoutes=()=>{//useLocation객체를 이용하여 정규표현식을 사용한 /admin/~ 으로 시작하는 경로와 비교에 사용(아래 1줄) */}\nconst location=useLocation();//리액트에서 사이트관리자에 접근하는 토큰값 위변조 방지용으로 서버에서 비교하는 함수 추가\nconst jwtAuthentication=useCallback(()=>{console.group(\"jwtAuthentication\");console.log(\"[Start] jwtAuthentication ------------------------------\");const jwtAuthURL=\"/jwtAuthAPI\";let requestOptions={method:\"POST\"};EgovNet.requestFetch(jwtAuthURL,requestOptions,resp=>{if(resp===false){setMounted(false);}else{setMounted(true);// 이 값으로 true 일 때만 페이지를 렌더링이 되는 변수 사용.\n}});console.log(\"------------------------------jwtAuthentication [End]\");console.groupEnd(\"jwtAuthentication\");},[]);//시스템관리 메뉴인 /admin/으로 시작하는 URL은 모두 로그인이 필요하도록 코드추가(아래)\nconst isMounted=useRef(false);// 아래 로그인 이동 부분이 2번 실행되지 않도록 즉, 마운트 될 때만 실행되도록 변수 생성\nconst[mounted,setMounted]=useState(false);// 컴포넌트 최초 마운트 후 리렌더링 전 로그인 페이지로 이동하는 조건으로 사용\nuseEffect(()=>{if(!isMounted.current){// 컴포넌트 최초 마운트 시 페이지 진입 전(렌더링 전) 실행\nisMounted.current=true;// 이 값으로 true 일 때만 페이지를 렌더링이 되는 변수 사용.\nsetMounted(true);// 이 값으로 true 일 때만 페이지를 렌더링이 되는 변수 사용.\nconst regex=/^(\\/admin\\/)+(.)*$/;//정규표현식 사용: /admin/~ 으로 시작하는 경로 모두 포함\nif(regex.test(location.pathname)){setMounted(false);// 이 값으로 true 일 때만 페이지를 렌더링이 되는 변수 사용. 기본은 숨기기\njwtAuthentication();// 이 함수에서 관리자단 인증여부 확인 후 렌더링 처리\n}}},[jwtAuthentication,location,mounted]);// location 경로와 페이지 마운트상태가 변경 될 때 업데이트 후 리렌더링\nif(mounted){// 인증 없이 시스템관리 URL로 접근할 때 렌더링 되는 것을 방지하는 조건추가. \nreturn/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:URL.ERROR,element:/*#__PURE__*/_jsx(EgovError,{})}),/*#__PURE__*/_jsx(Route,{path:\"*\",element:/*#__PURE__*/_jsx(SecondRoutes,{})})]});}};const SecondRoutes=()=>{// eslint-disable-next-line no-unused-vars\nconst[loginVO,setLoginVO]=useState({});//useRef객체를 사용하여 페이지 마운트 된 후 ui.js를 로딩 하도록 변경 코드 추가(아래)\nconst isMounted=useRef(false);// 아래 로그인 이동 부분이 2번 실행되지 않도록 즉, 마운트 될 때만 실행되도록 변수 생성\nuseEffect(()=>{if(!isMounted.current){// 컴포넌트 최초 마운트 시 페이지 진입 전(렌더링 전) 실행\nisMounted.current=true;// 이 값으로 true 일 때만 페이지를 렌더링이 되는 변수 사용.\n}else{initPage();}},[]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(EgovHeader,{}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:URL.MAIN,element:/*#__PURE__*/_jsx(EgovMain,{})}),/*#__PURE__*/_jsx(Route,{path:URL.LOGIN,element:/*#__PURE__*/_jsx(EgovLogin,{onChangeLogin:user=>setLoginVO(user)})}),/*#__PURE__*/_jsx(Route,{path:URL.ERROR,element:/*#__PURE__*/_jsx(EgovError,{})}),/*#__PURE__*/_jsx(Route,{path:URL.ABOUT,element:/*#__PURE__*/_jsx(Navigate,{to:URL.ABOUT_SITE})}),/*#__PURE__*/_jsx(Route,{path:URL.ABOUT_SITE,element:/*#__PURE__*/_jsx(EgovAboutSite,{})}),/*#__PURE__*/_jsx(Route,{path:URL.ABOUT_HISTORY,element:/*#__PURE__*/_jsx(EgovAboutHistory,{})}),/*#__PURE__*/_jsx(Route,{path:URL.ABOUT_ORGANIZATION,element:/*#__PURE__*/_jsx(EgovAboutOrganization,{})}),/*#__PURE__*/_jsx(Route,{path:URL.ABOUT_LOCATION,element:/*#__PURE__*/_jsx(EgovAboutLocation,{})})]}),/*#__PURE__*/_jsx(EgovFooter,{}),\"]\"]});};export default RootRoutes;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}