{"ast":null,"code":"import React,{useEffect,useRef}from\"react\";import axios from\"axios\";import'../css/chatbot.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const ChatWindow=_ref=>{let{messages,setMessages}=_ref;// 여기에는 메시지를 표시하고 입력을 처리하는 로직을 추가합니다.\nconst handleMessageSubmit=async e=>{e.preventDefault();const inputMessage=e.target.message.value.trim();if(inputMessage){setMessages([...messages,{type:'user',text:inputMessage}]);// 사용자 메시지 추가\ne.target.message.value='';// 입력 필드 초기화\nconst response=await sendMessageToBackend(inputMessage);if(!response.error){setMessages(messages=>[...messages,{type:'bot',text:response}]);// 백엔드 응답 추가\n}else{// 오류 메시지 처리\nsetMessages(messages=>[...messages,{type:'bot',text:'Sorry, there was an error processing your message.'}]);}}};const BACKEND_URL='http://localhost:8080/gpt/gen';const sendMessageToBackend=async message=>{try{// return {\n//     error: null,\n//     message: message + \" checked\"\n// };\nconst response=await axios.post(BACKEND_URL,{message});return response.data;// 백엔드에서 반환한 응답\n}catch(error){console.error('Error sending message:',error);return{error:'Failed to send message'};// 오류 처리\n}};const endOfMessagesRef=useRef(null);useEffect(()=>{var _endOfMessagesRef$cur;(_endOfMessagesRef$cur=endOfMessagesRef.current)===null||_endOfMessagesRef$cur===void 0?void 0:_endOfMessagesRef$cur.scrollIntoView({behavior:'smooth'});},[messages]);return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-window\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-title\",children:\"\\uCC44\\uD305\\uBD07\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-content\",children:[\" \",messages.map((message,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"message-container \".concat(message.type==='user'?'message-user-container':'message-bot-container'),children:/*#__PURE__*/_jsx(\"div\",{className:\"message \".concat(message.type==='user'?'message-user':'message-bot'),children:message.text})},index))]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleMessageSubmit,className:\"chat-input\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"message\",placeholder:\"Type a message...\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Send\"})]})]});};export default ChatWindow;","map":{"version":3,"names":["React","useEffect","useRef","axios","jsx","_jsx","jsxs","_jsxs","ChatWindow","_ref","messages","setMessages","handleMessageSubmit","e","preventDefault","inputMessage","target","message","value","trim","type","text","response","sendMessageToBackend","error","BACKEND_URL","post","data","console","endOfMessagesRef","_endOfMessagesRef$cur","current","scrollIntoView","behavior","className","children","map","index","concat","onSubmit","name","placeholder"],"sources":["/Users/macheewon/Documents/GitHub/aws-winter-yonsei/src/main/frontend/react/src/chatbot/ChatWindow.jsx"],"sourcesContent":["import React, {useEffect, useRef} from \"react\";\nimport axios from \"axios\";\nimport '../css/chatbot.css';\n\nconst ChatWindow = ({ messages, setMessages }) => {\n    // 여기에는 메시지를 표시하고 입력을 처리하는 로직을 추가합니다.\n    const handleMessageSubmit = async (e) => {\n        e.preventDefault();\n        const inputMessage = e.target.message.value.trim();\n        if (inputMessage) {\n            setMessages([...messages, { type: 'user', text: inputMessage }]); // 사용자 메시지 추가\n            e.target.message.value = ''; // 입력 필드 초기화\n\n            const response = await sendMessageToBackend(inputMessage);\n            if (!response.error) {\n                setMessages(messages => [...messages, { type: 'bot', text: response }]); // 백엔드 응답 추가\n            } else {\n                // 오류 메시지 처리\n                setMessages(messages => [...messages, { type: 'bot', text: 'Sorry, there was an error processing your message.' }]);\n            }\n        }\n    };\n\n    const BACKEND_URL = 'http://localhost:8080/gpt/gen';\n    const sendMessageToBackend = async (message) => {\n        try {\n            // return {\n            //     error: null,\n            //     message: message + \" checked\"\n            // };\n            const response = await axios.post(BACKEND_URL, { message });\n            return response.data; // 백엔드에서 반환한 응답\n        } catch (error) {\n            console.error('Error sending message:', error);\n            return { error: 'Failed to send message' }; // 오류 처리\n        }\n    };\n    const endOfMessagesRef = useRef(null);\n\n    useEffect(() => {\n        endOfMessagesRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }, [messages]);\n\n    return (\n        <div className=\"chat-window\">\n            <div className=\"chat-title\">채팅봇</div>\n            <div className=\"chat-content\"> {/* 채팅 내용을 위한 컨테이너 추가 */}\n                {messages.map((message, index) => (\n                    <div\n                        key={index}\n                        className={`message-container ${message.type === 'user' ? 'message-user-container' : 'message-bot-container'}`}\n                    >\n                        <div className={`message ${message.type === 'user' ? 'message-user' : 'message-bot'}`}>\n                            {message.text}\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <form onSubmit={handleMessageSubmit} className=\"chat-input\">\n                <input\n                    type=\"text\"\n                    name=\"message\"\n                    placeholder=\"Type a message...\"\n                />\n                <button type=\"submit\">Send</button>\n            </form>\n        </div>\n\n    );\n\n};\n\nexport default ChatWindow;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}